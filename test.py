import numpy as np
import json
import math
import pyproj

chain = {
    '知春里': {'知春路': 7, '西土城': 9, '北土城': 14},
    '知春路': {'知春里': 7, '西土城': 10, '牡丹园': 15},
    '西土城': {'知春里': 9, '知春路': 10, '牡丹园': 11, '北土城': 2},
    '牡丹园': {'知春路': 15, '西土城': 11, '健德门': 6},
    '健德门': {'牡丹园': 6, '北土城': 9},
    '北土城': {'知春里': 14, '西土城': 2, '健德门': 9}
}

class graph():
    def __init__(self, chain):
        self.chain = chain  #dictionary
        self.vertexes = list(chain.keys())  #list
        self.adjacency_matrix = self.chainTomatrix()   #list

    def __str__(self):
        return str(self.chain)
    def chainTomatrix(self):#邻接矩阵
        matrix = np.zeros((len(self.vertexes), len(self.vertexes)))
        matrix += np.inf    #距离无限
        for key, value in self.chain.items():
            key_index = self.vertexes.index(key)
            for k, v in value.items():
                k_index = self.vertexes.index(k)
                matrix[key_index][k_index] = v
            matrix[key_index][key_index] = 0    #对角线为0
        return matrix.tolist()

class dijkstra():
    def __init__(self, graph, start, trans, lines, lines_1):
        self.start = start
        self.graph = graph
        self.trans = trans#换乘站
        self.lines = lines#不包含换乘站
        self.lines_1 = lines_1#包含换乘站
        self.set = self.initset()
        self.unsearch = self.initunsearch()
        self.distance = self.getdistance()
        self.station = self.initstation()
        self.path = self.initpath()
        self.tr = []

    def initset(self):
        return [self.start]

    def initall(self):
        self.set = self.initset()
        self.unsearch = self.initunsearch()
        self.distance = self.getdistance()
        self.station = self.initstation()
        self.path = self.initpath()
        self.tr = []

    def initunsearch(self):
        unsearch = self.graph.vertexes[:]
        unsearch.remove(self.start)
        return unsearch

    def getdistance(self):
        distance = {}
        vertexes = self.graph.vertexes
        index = vertexes.index(self.start)
        for i, dis in enumerate(self.graph.adjacency_matrix[index]):
            distance[vertexes[i]] = dis
        return distance

    def initstation(self):
        return self.start

    def initpath(self):
        path = {}
        vertexes = self.graph.vertexes
        index = vertexes.index(self.start)
        for i, dis in enumerate(self.graph.adjacency_matrix[index]):
            path[vertexes[i]] = []
            if dis != np.inf:
                path[vertexes[i]].append(self.start)
        return path

    def updatestation(self, index):
        dis_sort = list(self.distance.values())
        dis_sort.sort()
        station_dis = dis_sort[index]
        for k, dis in self.distance.items():
            if station_dis == dis and k not in self.set:
                self.station = k
                break

    def updatepath(self):
        dis_path = {}
        index = self.graph.vertexes.index(self.station)
        for i, key in enumerate(self.distance.keys()):
            dis_path[key] = self.distance[self.station] + self.graph.adjacency_matrix[index][i]
            if dis_path[key] < self.distance[key]:
                self.distance[key] = dis_path[key]
                self.path[key] = self.path[self.station].copy()
                self.path[key].append(self.station)

    def find_shortest_path(self, end = None):
        self.end = end
        self.initall()
        self.path = self.initpath()
        count = 1
        while self.unsearch:
            self.updatestation(count)
            self.set.append(self.station)
            self.unsearch.remove(self.station)
            self.updatepath()
            count = count + 1
            if end != None and end in self.set:
                result = self.path[end].copy()
                result.append(end)
                return result
        return self.path

    # def is_trans(self):
    #     if self.station in self.trans.keys():
    #         return True
    #     else:
    #         return False

    # def getline(self):
    #     station = self.station
    #     if(self.is_trans() == False):
    #         for k, v in self.lines.items():
    #             if station in v:
    #                 self.line = k
    #         return True
    #     elif(self.is_trans() == True):
    #         if self.line != 0:
    #             self.pretline = self.line
    #         return False
    #
    # def initline(self):
    #     if len(self.set) == 2:
    #         for k, v in self.lines_1.items():
    #             if self.set[0] in v and self.set[1] in v:
    #                 self.line = k

    def trans_station(self, path):
        transtas = []
        sta = [0,0]
        for station in path:
            if station in self.trans.keys() and station != path[0] and station != path[-1]:
                a = path.index(station)
                pre = path[a - 1]
                next = path[a + 1]
                for k, v in self.lines_1.items():
                    # if station in v and pre in v and next in v:
                    #     pass
                    # if station in v and pre in v and next not in v:
                    #     transtas.append(station)
                    # elif station in v and pre not in v and next in v:
                    #     transtas.append(station)
                    if pre in v and station in v:
                        sta[0] = k
                    if station in v and next in v:
                        sta[1] = k
                if sta[0] != 0 and sta[1] != 0 and sta[0] != sta[1]:
                    transtas.append(station)
                    sta = [0, 0]
        return list(set(transtas))

    # def if_trans(self):
    #     if self.line != self.pretline:
    #         self.pretline = self.line
    #         return True
    #     else:
    #         return False
    #
    # def change(self):
    #     matrix = np.array(self.graph.adjacency_matrix)
    #     for k in self.lines_1[self.line]:
    #         if k in self.trans.keys():#换乘站
    #             for s in self.trans[k].keys():
    #                 if s not in self.lines_1:#找到换乘站能到达的不属于本线路的站
    #                     index1 = self.graph.vertexes.index(k)
    #                     index2 = self.graph.vertexes.index(s)
    #                     matrix[index1][index2] = matrix[index1][index2] + 10
    #                     matrix[index2][index1] = matrix[index2][index1] + 10
    #     self.graph.adjacency_matrix = matrix.tolist()
    #
    # def find_least_trans(self, end=None):
    #     self.end = end
    #     self.initall()
    #     self.path = self.initpath()
    #     count = 1
    #     while self.unsearch:
    #         self.updatestation(count)
    #         self.set.append(self.station)
    #         self.unsearch.remove(self.station)
    #         self.updatepath()
    #         count = count + 1
    #         if end != None and end in self.set:
    #             result = self.path[end].copy()
    #             result.append(end)
    #             return result
    #     return self.path
    #     # self.initall()
    #     # self.path = self.initpath()
    #     # count = 1
    #     # # self.initline()
    #     # while self.unsearch:
    #     #     self.initline()
    #     #     if len(self.set)>=2 and self.getline() and self.if_trans():
    #     #         self.change()
    #     #     self.updatestation(count)
    #     #     self.set.append(self.station)
    #     #     self.unsearch.remove(self.station)
    #     #     self.updatepath()
    #     #     count = count + 1
    #     #     if end != None and end in self.set:
    #     #         result = self.path[end].copy()
    #     #         result.append(end)
    #     #         return result
    #     # return self.path

    def totrans(self, path):
        trans = []
        path1 = []

        for i in path:
            a = i
            if i[-1] == '1' or i[-1] == '2':
                a = i[0:len(i)-1]
            path1.append(a)
        for j in path1:
            if path1.count(j) > 1:
                path1.remove(j)
                if j != self.start and j != self.end:
                    trans.append(j)
                else:
                    self.tr.append(j)
        return path1, trans

    def getPrice(self, path):
        dis = len(path) * 1.3
        if self.start in self.tr:
            dis = dis - 1.3
        if self.end in self.tr:
            dis = dis - 1.3
        if dis <= 6:
            return 3
        elif dis <= 12:
            return 4
        elif dis <= 22:
            return 5
        elif dis <= 32:
            return 6
        elif dis <= 52:
            return 7
        elif dis <= 72:
            return 8
        else:
            return 9

    def getTime(self, path):
        dis = int(len(path) * 2)
        if self.start in self.tr:
            dis = dis - 2
        if self.end in self.tr:
            dis = dis - 2
        return (dis)


# lines = {}
# a = {1: {'苹果园':[3,22], '古城':[4,21], '八角游乐园':[5,21], '八宝山':[6,21], '玉泉路':[7,21], '五棵松':[8,21], '万寿路':[9,21], '公主坟':[10,21], '军事博物馆':[11,21], '木樨地':[12,21],
#          '南礼士路':[13,21], '复兴门':[14,21], '西单':[15,21], '天安门西':[16,21], '天安门东':[17,21], '王府井':[18,21], '东单':[19,21], '建国门':[20,21], '永安里':[21,21], '国贸':[22,21], '大望路':[23,21],
#          '四惠':[24,21], '四惠东':[25,21], '高碑店':[26,21], '传媒大学':[27,21], '双桥':[28,21], '管庄':[29,21], '八里桥':[30,21], '通州北苑':[31,20], '果园':[32,19], '九棵树':[33,18], '梨园':[34,17],
#          '临河里':[35,16], '土桥':[36,15], '花庄':[37,14], '环球度假区':[36,13]},
#      2: {'阜成门':[14,23], '车公庄':[14,25], '西直门':[14,27], '积水潭':[15,27], '鼓楼大街':[16,27], '安定门':[17,27], '雍和宫':[18,27], '东直门':[20,25], '东四十条':[20,23], '朝阳门':[20,22],
#          '建国门':[20,21], '北京站':[20,19], '崇文门':[18,19], '前门':[17,19], '和平门':[16,19], '宣武门':[15,19], '长椿街':[14,19], '复兴门':[14,21]},
#      4: {'安河桥北':[7,37], '北宫门':[9,37], '西苑':[11,37], '圆明园':[12,37], '北京大学东门':[12,36], '中关村':[12,35], '海淀黄庄':[12,34], '人民大学':[12,29], '魏公村':[12,28],
#          '国家图书馆':[12,27], '动物园':[13,27], '新街口':[15,27], '平安里':[15,26], '西四':[15,24], '灵境胡同':[15,22], '西单':[15,21], '宣武门':[15,20], '菜市口':[15,19], '陶然亭':[15,18],
#          '北京南站':[15,17],'马家堡':[15,16], '角门西':[15,15], '公益西桥':[15,14], '新宫':[15,13], '西红门':[14,12], '高米店北':[14,11], '高米店南':[14,10], '枣园':[14,9], '清源路':[14,8],
#          '黄村西大街':[14,7], '义和庄':[14,6], '生物医药基地':[14,5], '天宫院':[14,4]},
#      5: {'天通苑北':[18,38], '天通苑':[18,37], '天通苑南':[18,36], '立水桥':[18,35], '立水桥南':[18,34], '北苑路北':[18,33], '大屯路东':[18,32], '惠新西街北口':[18,31], '惠新西街南口':[18,30],
#          '和平西桥':[18,29], '和平里北街':[18,28], '雍和宫':[18,27], '北新桥':[18,25], '张自忠路':[18,23], '东四':[18,22], '灯市口':[18,21], '东单':[18,20], '崇文门':[18,19], '磁器口':[18,18],
#          '天坛东门':[18,17], '蒲黄榆':[18,16], '刘家窑':[18,15], '宋家庄':[18,14]},
#      6: {'金安桥':[2,22], '苹果园':[3,22], '杨庄':[4,23], '西黄村':[5,24], '廖公庄':[6,24], '田村':[10,24], '海淀五路居':[11,24], '慈寿寺':[12,24], '花园桥':[13,24], '白石桥南':[14,24], '二里沟':[15,24],
#          '车公庄西':[16,24], '北海北':[17,24], '南锣鼓巷':[18,24], '东四':[19,22], '朝阳门':[20,22], '东大桥':[21,22], '呼家楼':[22,22], '金台路':[23,22], '十里堡':[24,22], '青年路':[25,22], '褡裢坡':[26,22],
#          '黄渠':[27,22], '常营':[28,22], '草房':[29,22], '物资学院路':[30,22], '通州北关':[31,22], '通运门':[32,21], '北运河西':[33,19], '北运河东':[34,19], '郝家府':[35,19], '东夏园':[36,19], '潞城':[37,19]},
#      8: {'朱辛庄':[13,40], '育知路':[14,40], '平西府':[15,40], '回龙观东大街':[16,39], '霍营':[16,38], '育新':[16,37], '西小口':[16,36], '永泰庄':[16,35], '林萃桥':[16,34], '森林公园南门':[16,33],
#          '奥林匹克公园':[16,32], '奥体中心':[16,31], '北土城':[16,30], '安华桥':[16,29], '安德里北街':[16,28], '鼓楼大街':[16,27], '什刹海':[17,25], '南锣鼓巷':[18,24], '中国美术馆':[18,23],
#          '金鱼胡同':[18,22], '王府井':[18,21], '前门':[17,19], '珠市口':[16,18], '天桥':[16,17], '永定门外':[16,16], '木樨园':[16,15], '海户屯':[16,14], '大红门':[16,13], '大红门南':[16,12], '和义':[16,11],
#          '东高地':[16,10], '火箭万源':[17,9], '五福堂':[18,8], '德茂':[19,7], '瀛海':[20,6]},
#      9: {'国家图书馆':[12,27], '白石桥南':[14,24], '白堆子':[11,22], '军事博物馆':[11,21], '北京西站':[11,20], '六里桥东':[10,19], '六里桥':[9,18], '七里庄':[8,16], '丰台东大街':[8,15],
#          '丰台南路':[8,14], '科怡路':[8,13], '丰台科技园':[8,12], '郭公庄':[8,11]},
#      10: {'巴沟':[8,30], '苏州街':[9,30], '海淀黄庄':[10,30], '知春里':[11,30], '知春路':[12,30], '西土城':[13,30], '牡丹园':[14,30], '健德门':[15,30], '北土城':[16,30], '安贞门':[17,30],
#           '惠新西街南口':[18,30], '芍药居':[20,30], '太阳宫':[22,27], '三元桥':[22,26], '亮马桥':[22,25], '农业展览馆':[22,24], '团结湖':[22,23], '呼家楼':[22,22], '金台夕照':[22,22], '国贸':[22,21],
#           '双井':[20,19], '劲松':[20,18], '潘家园':[20,17], '分钟寺':[20,14], '成寿寺':[19,14], '宋家庄':[18,14], '石榴庄':[17,15], '角门东':[16,15], '角门西':[15,15], '草桥':[14,15], '纪家庙':[13,15],
#           '首经贸':[12,15], '丰台站':[11,15], '泥洼':[11,15], '西局':[11,16], '六里桥':[11,17], '莲花桥':[11,18], '公主坟':[11,19], '西钓鱼台':[11,22], '慈寿寺':[12,24], '车道沟':[8,26], '长春桥':[8,28],
#           '火器营':[8,29]},
#      13: {'西直门':[14,27], '大钟寺':[12,28], '知春路':[12,30], '五道口':[12,31], '上地':[12,32], '清河站':[12,34], '西二旗':[12,36], '龙泽':[12,38], '回龙观':[14,38], '霍营':[16,38], '立水桥':[18,38],
#           '北苑':[20,36], '望京西':[20,32], '芍药居':[20,30], '光熙门':[20,28], '柳芳':[20,26], '东直门':[20,25]},
#      14: {'张郭庄':[5,16], '园博园':[6,16], '大瓦窑':[7,16], '郭庄子':[8,16], '大井':[9,16], '七里营':[10,16], '西局':[11,16], '东管头':[11,17], '丽泽商务区':[11,17], '菜户营':[12,17], '西铁营':[13,17],
#           '景风门':[14,17], '北京南站':[15,17], '永定门外':[16,16], '景泰':[17,16], '蒲黄榆':[18,16], '方庄':[19,16], '十里河':[20,16], '北工大西门':[21,16], '平乐园':[22,18], '九龙山':[23,19],
#           '大望路':[23,21], '红庙':[23,22], '金台路':[23,22], '朝阳公园':[23,23], '枣营':[23,24], '东风北桥':[23,25], '将台':[23,26], '高家园':[23,27], '望京南':[22,28], '阜通':[21,29], '望京':[20,33],
#           '东湖渠':[20,34], '来广营':[20,35], '善各庄':[20,36]}}
# jsonA = json.dumps(a)
# with open('position.json', 'w', encoding='utf-8') as f:
#     f.write(jsonA)
# with open('position.json', 'r', encoding='utf-8') as f:
#     po = f.read()
# pos = json.loads(po)
# print(pos)

# lines = {}
# a = {1: {'苹果园':[116.177781,39.926325], '古城':[116.197072,39.913414], '八角游乐园':[116.21939, 39.913076], '八宝山':[116.242277, 39.913185], '玉泉路':[116.25947,39.913501], '五棵松':[116.280423,39.913833], '万寿路':[116.30155,39.91371], '公主坟':[116.316696,39.913509], '军事博物馆':[116.330349,39.913214], '木樨地':[116.344097,39.913125],
#          '南礼士路':[116.359221,39.912979], '复兴门':[116.364381,39.913014], '西单':[116.383402,39.913357], '天安门西':[116.39805,39.913776], '天安门东':[116.407851,39.91408], '王府井':[116.417796,39.914398], '东单':[116.426004,39.914476], '建国门':[116.44084,39.914526], '永安里':[116.457089,39.914223], '国贸':[116.46667,39.914138], '大望路':[116.482387,39.91413],
#          '四惠':[116.501945,39.91486], '四惠东':[116.501945,39.91486], '高碑店':[116.538,39.915798], '传媒大学':[116.561375,39.915197], '双桥':[116.583332,39.915885], '管庄':[116.605782,39.914907], '八里桥':[116.625141,39.912218], '通州北苑':[116.64361,39.910064], '果园':[116.653044,39.89966], '九棵树':[116.663922,39.896462], '梨园':[116.675218,39.889716],
#          '临河里':[116.685467,39.881239], '土桥':[116.69298,39.877629], '花庄':[116.701878,39.863955], '环球度假区':[116.68321,39.85625]},
#      2: {'阜成门':[116.362817,39.929522], '车公庄':[116.362436,39.938489], '西直门':[116.362125,39.946021], '积水潭':[116.379185,39.954765], '鼓楼大街':[116.399937,39.955358], '安定门':[116.414597,39.955441], '雍和宫':[116.42325,39.955573], '东直门':[116.440288,39.947302], '东四十条':[116.440638,39.939841], '朝阳门':[116.441075,39.930642],
#          '建国门':[116.442313,39.914513], '北京站':[116.433608,39.911127], '崇文门':[116.423881,39.907367], '前门':[116.404276,39.906534], '和平门':[116.390619,39.906362], '宣武门':[116.380848,39.905881], '长椿街':[116.369911,39.90534], '复兴门':[116.363143,39.913029],'阜成门1':[116.362817,39.929522]},
#      4: {'安河桥北':[116.276432,40.018657], '北宫门':[116.28399,40.008678], '西苑':[116.298094,40.004726], '圆明园':[116.315938,40.005466], '北京大学东门':[116.322265,39.998006], '中关村':[116.323066,39.989956], '海淀黄庄':[116.324348,39.981865], '人民大学':[116.32809,39.97277], '魏公村':[116.329874,39.963457],
#          '国家图书馆':[116.331897,39.948864], '动物园':[116.345204,39.943923], '西直门':[116.362125,39.946021],'新街口':[116.362125,39.946021], '平安里':[116.377042,39.939251], '西四':[116.37977,39.930248], '灵境胡同':[116.37977,39.930248], '西单':[116.383402,39.913357], '宣武门':[116.380848,39.905881], '菜市口':[116.38074,39.895375], '陶然亭':[116.380902,39.884625],
#          '北京南站':[116.385169,39.870965],'马家堡':[116.377878,39.859199], '角门西':[116.377644,39.851929], '公益西桥':[116.377314,39.843056], '新宫':[116.372097,39.818302], '西红门':[116.335169,39.795445], '高米店北':[116.337331,39.779548], '高米店南':[116.33841,39.769059], '枣园':[116.338975,39.759079], '清源路':[116.339019,39.748354],
#          '黄村西大街':[116.339482,39.73738], '义和庄':[116.325538,39.718296], '生物医药基地':[116.328329,39.692307], '天宫院':[116.326437,39.676122]},
#      5: {'天通苑北':[116.419385,40.089597], '天通苑':[116.419233,40.081478], '天通苑南':[116.419113,40.072752], '立水桥':[116.418274,40.059244], '立水桥南':[116.420973,40.048143], '北苑路北':[116.424525,40.036821], '大屯路东':[116.424567,40.009611], '惠新西街北口':[116.423532,39.994151], '惠新西街南口':[116.42404,39.983276],
#          '和平西桥':[116.424463,39.974502], '和平里北街':[116.425051,39.964752], '雍和宫':[116.42325,39.955573], '北新桥':[116.423298,39.947112], '张自忠路':[116.423579,39.939914], '东四':[116.423405,39.930647], '灯市口':[116.424169,39.923603], '东单':[116.426004,39.914476], '崇文门':[116.423881,39.907367], '磁器口':[116.426035,39.899339],
#          '天坛东门':[116.427392,39.888497], '蒲黄榆':[116.428894,39.871689], '刘家窑':[116.428565,39.863697], '宋家庄':[116.434913,39.851941]},
#      6: {'金安桥':[116.169015,39.92957], '苹果园':[116.184834,39.931823], '杨庄':[116.194344,39.9342], '西黄村':[116.212741,39.939418], '廖公庄':[116.233658,39.938072], '田村':[116.259453,39.935587], '海淀五路居':[116.282736,39.9386], '慈寿寺':[116.300677,39.93927], '花园桥':[116.317559,39.938382], '白石桥南':[116.332038,39.938399], '二里沟':[116.340264,39.938114],
#          '车公庄西':[116.350644,39.938074], '车公庄':[116.362436,39.938489],'平安里':[116.378635,39.939264],'北海北':[116.39289,39.939493], '南锣鼓巷':[116.409683,39.93984], '东四':[116.423405,39.930647], '朝阳门':[116.441075,39.930642], '东大桥':[116.458252,39.928625], '呼家楼':[116.468237,39.929238], '金台路':[116.484892,39.929238], '十里堡':[116.508479,39.929238], '青年路':[116.523829,39.929469], '褡裢坡':[116.570759,39.929826],
#          '黄渠':[116.584684,39.929938], '常营':[116.605447,39.93151], '草房':[116.622546,39.930673], '物资学院路':[116.645543,39.933087], '通州北关':[116.668053,39.924687], '通运门':[116.68012,39.916495], '北运河西':[116.694620,39.908896], '北运河东':[116.713988,39.908924], '郝家府':[116.724215,39.909286], '东夏园':[116.740896,39.909493], '潞城':[116.754799,39.90889]},
#      8: {'朱辛庄':[116.32013,40.110334], '育知路':[116.333898,40.09371], '平西府':[116.357247,40.095792], '回龙观东大街':[116.369753,40.086965], '霍营':[116.366721,40.077129], '育新':[116.353997,40.066124], '西小口':[116.358213,40.052716], '永泰庄':[116.361159,40.043692], '林萃桥':[116.378905,40.027995], '森林公园南门':[116.399036,40.016211],
#          '奥林匹克公园':[116.398711,40.007852], '奥体中心':[116.400191,39.992442], '北土城':[116.400663,39.983255], '安华桥':[116.400603,39.974878], '安德里北街':[116.400884,39.963931], '鼓楼大街':[116.399937,39.955358], '什刹海':[116.402547,39.944154], '南锣鼓巷':[116.409683,39.93984], '中国美术馆':[116.417259,39.930527],
#          '金鱼胡同':[116.419751,39.921841], '王府井':[116.417939,39.915062], '前门':[116.405347,39.905936], '珠市口':[116.404704,39.89722], '天桥':[116.405247,39.88889], '永定门外':[116.405989,39.872783], '木樨园':[116.406345,39.86553], '海户屯':[116.406713,39.858265], '大红门':[116.406253,39.851841], '大红门南':[116.407429,39.843215], '和义':[116.408491,39.821387],
#          '东高地':[116.415686,39.811434], '火箭万源':[116.425132,39.805405], '五福堂':[116.430158,39.791422], '德茂':[116.448258,39.778312], '瀛海':[116.455649,39.766582]},
#      9: {'国家图书馆':[116.331897,39.948864], '白石桥南':[116.332038,39.938399], '白堆子':[116.332359,39.929707], '军事博物馆':[116.330349,39.913214], '北京西站':[116.327811,39.900677], '六里桥东':[116.321463,39.89278], '六里桥':[116.30961,39.886428], '七里庄':[116.300553,39.873015], '丰台东大街':[116.300215,39.86144],
#          '丰台南路':[116.302854,39.847201], '科怡路':[116.303808,39.838664], '丰台科技园':[116.303639,39.831449], '郭公庄':[116.308567,39.820764]},
#      10: {'巴沟':[116.299578,39.980549], '苏州街':[116.312768,39.981704], '海淀黄庄':[116.324348,39.981865], '知春里':[116.336091,39.982061], '知春路':[116.347619,39.982065], '西土城':[116.360484,39.982026], '牡丹园':[116.376446,39.982371], '健德门':[116.387816,39.982833], '北土城':[116.400663,39.983255], '安贞门':[116.412371,39.983322],
#           '惠新西街南口':[116.42404,39.983276], '芍药居':[116.443571,39.983549], '太阳宫':[116.454059,39.978367], '三元桥':[116.463573,39.96688], '亮马桥':[116.468743,39.955006], '农业展览馆':[116.468772,39.946988], '团结湖':[116.468337,39.939382], '呼家楼':[116.468237,39.928981], '金台夕照':[116.468282,39.922961], '国贸':[116.466671,39.914138],
#           '双井':[116.468453,39.899186], '劲松':[116.468011,39.890027], '潘家园':[116.467741,39.881735], '十里河':[116.465176,39.871712],'分钟寺':[116.460348,39.857886], '成寿寺':[116.454315,39.851457], '宋家庄':[116.434913,39.851941], '石榴庄':[116.420566,39.852109], '大红门':[116.406253,39.851841], '角门东':[116.392751,39.851487], '角门西':[116.377644,39.851929], '草桥':[116.359241,39.851597], '纪家庙':[116.339533,39.850124],
#           '首经贸':[116.326613,39.85032], '丰台站':[116.311475,39.856026], '泥洼':[116.310813,39.8647], '西局':[116.309898,39.87224], '六里桥':[116.30961,39.886428], '莲花桥':[116.316823,39.904081], '公主坟':[116.316696,39.913509], '西钓鱼台':[116.304186,39.929671], '慈寿寺':[116.300677,39.93927], '车道沟':[116.300274,39.954895], '长春桥':[116.300461,39.964876],
#           '火器营':[116.29561,39.972383],'巴沟1':[116.299578,39.980549]},
#      13: {'西直门':[116.362125,39.946021], '大钟寺':[116.35182,39.972034], '知春路':[116.347619,39.982065], '五道口':[116.344434,39.998568], '上地':[116.326836,40.038699], '清河站':[116.321269,40.047384], '西二旗':[116.312564,40.059029], '龙泽':[116.326173,40.076647], '回龙观':[116.34232,40.076426], '霍营':[116.366721,40.077129], '立水桥':[116.418274,40.059244],
#           '北苑':[116.441315,40.048872], '望京西':[116.455596,40.001109], '芍药居':[116.443571,39.983549], '光熙门':[116.438355,39.974474], '柳芳':[116.439265,39.964106], '东直门':[116.440288,39.947302]},
#      14: {'张郭庄':[116.193406,39.864102], '园博园':[116.208364,39.867099], '大瓦窑':[116.246953,39.865215], '郭庄子':[116.259835,39.870755], '大井':[116.281826,39.871571], '七里营':[116.300553,39.873015], '西局':[116.309898,39.87224], '东管头':[116.327755,39.873415], '丽泽商务区':[116.338253,39.873404], '菜户营':[116.348781,39.873256], '西铁营':[116.362399,39.867026],
#           '景风门':[116.371824,39.869178], '北京南站':[116.385169,39.870965], '永定门外':[116.405729,39.873727], '景泰':[116.417164,39.871443], '蒲黄榆':[116.428894,39.871689], '方庄':[116.446196,39.871749], '十里河':[116.465176,39.871712], '北工大西门':[116.484017,39.880747], '平乐园':[116.483967,39.890758], '九龙山':[116.484689,39.899525],
#           '大望路':[116.482387,39.91413], '红庙':[116.483639,39.9216], '金台路':[116.484892,39.929069], '朝阳公园':[116.484946,39.939443], '枣营':[116.481552,39.950188], '东风北桥':[116.492579,39.9645], '将台':[116.496253,39.97696], '高家园':[116.494913,39.986382], '望京南':[116.488454,39.990534], '阜通':[116.477642,39.997887], '望京':[116.475304,40.004532],
#           '东湖渠':[116.474032,40.016228], '来广营':[116.473489,40.026145], '善各庄':[116.484762,40.03309]}}
# jsonA = json.dumps(a)
# with open('position1.json', 'w', encoding='utf-8') as f:
#     f.write(jsonA)
# with open('position1.json', 'r', encoding='utf-8') as f:
#     po = f.read()
# pos = json.loads(po)

#
# def wgs48_to_xy(lon, lat):
#     latlon = pyproj.Proj(init='epsg:4326')
#     xy = pyproj.Proj(init='epsg:3857')
#     x = []
#     y = []
#     for a, b in zip(lon, lat):
#         x1, y1 = pyproj.transform(latlon, xy, a, b)
#         x.append(int((x1 - 12932851)/100))
#         y.append(int((y1 - 4855241)/100))
#         # x.append(x1)
#         # y.append(y1)
#     return x,y
if __name__ == '__main__':
    # aa = ['1', '2', '2', '3', '4', '4', '5', '6', '6']
    # for i in aa:
    #     if aa.count(i) > 1:
    #         aa.remove(i)
    #         aa.insert(aa.index(i) + 1, 'x')
    # print(aa)s
    with open('lines.json', 'r', encoding='utf-8') as f:
        data = f.read()
    dataA = json.loads(data)#lines_1
    print(dataA)
    # {'1': ['苹果园', '古城', '八角游乐园', '八宝山', '玉泉路', '五棵松', '万寿路', '公主坟', '军事博物馆', '木樨地',
    #        '南礼士路', '复兴门', '西单', '天安门西', '天安门东', '王府井', '东单', '建国门', '永安里', '国贸', '大望路',
    #        '四惠', '四惠东', '高碑店', '传媒大学', '双桥', '管庄', '八里桥', '通州北苑', '果园', '九棵树', '梨园',
    #        '临河里', '土桥', '花庄', '环球度假区'],
    #  '2': ['阜成门', '车公庄', '西直门', '积水潭', '鼓楼大街', '安定门', '雍和宫', '东直门', '东四十条', '朝阳门',
    #        '建国门', '北京站', '崇文门', '前门', '和平门', '宣武门', '长椿街', '复兴门'],
    #  '4': ['安河桥北', '北宫门', '西苑', '圆明园', '北京大学东门', '中关村', '海淀黄庄', '人民大学', '魏公村',
    #        '国家图书馆', '动物园', '新街口', '平安里', '西四', '灵境胡同', '西单', '宣武门', '菜市口', '陶然亭',
    #        '北京南站', '马家堡', '角门西', '公益西桥', '新宫', '西红门', '高米店北', '高米店南', '枣园', '清源路',
    #        '黄村西大街', '义和庄', '生物医药基地', '天宫院'],
    #  '5': ['天通苑北', '天通苑', '天通苑南', '立水桥', '立水桥南', '北苑路北', '大屯路东', '惠新西街北口',
    #        '惠新西街南口', '和平西桥', '和平里北街', '雍和宫', '北新桥', '张自忠路', '东四', '灯市口', '东单', '崇文门',
    #        '磁器口', '天坛东门', '蒲黄榆', '刘家窑', '宋家庄'],
    #  '6': ['金安桥', '苹果园', '杨庄', '西黄村', '廖公庄', '田村', '海淀五路居', '慈寿寺', '花园桥', '白石桥南',
    #        '二里沟', '车公庄西', '北海北', '南锣鼓巷', '东四', '朝阳门', '东大桥', '呼家楼', '金台路', '十里堡',
    #        '青年路', '褡裢坡', '黄渠', '常营', '草房', '物资学院路', '通州北关', '通运门', '北运河西', '北运河东',
    #        '郝家府', '东夏园', '潞城'],
    #  '8': ['朱辛庄', '育知路', '平西府', '回龙观东大街', '霍营', '育新', '西小口', '永泰庄', '林萃桥', '森林公园南门',
    #        '奥林匹克公园', '奥体中心', '北土城', '安华桥', '安德里北街', '鼓楼大街', '什刹海', '南锣鼓巷', '中国美术馆',
    #        '金鱼胡同', '王府井', '前门', '珠市口', '天桥', '永定门外', '木樨园', '海户屯', '大红门', '大红门南', '和义',
    #        '东高地', '火箭万源', '五福堂', '德茂', '瀛海'],
    #  '9': ['国家图书馆', '白石桥南', '白堆子', '军事博物馆', '北京西站', '六里桥东', '六里桥', '七里庄', '丰台东大街',
    #        '丰台南路', '科怡路', '丰台科技园', '郭公庄'],
    #  '10': ['巴沟', '苏州街', '海淀黄庄', '知春里', '知春路', '西土城', '牡丹园', '健德门', '北土城', '安贞门',
    #         '惠新西街南口', '芍药居', '太阳宫', '三元桥', '亮马桥', '农业展览馆', '团结湖', '呼家楼', '金台夕照',
    #         '国贸', '双井', '劲松', '潘家园', '十里河', '分钟寺', '成寿寺', '宋家庄', '石榴庄', '角门东', '角门西', '草桥',
    #         '纪家庙', '首经贸', '丰台站', '泥洼', '西局', '六里桥', '莲花桥', '公主坟', '西钓鱼台', '慈寿寺', '车道沟',
    #         '长春桥', '火器营'],
    #  '13': ['西直门', '大钟寺', '知春路', '五道口', '上地', '清河站', '西二旗', '龙泽', '回龙观', '霍营', '立水桥',
    #         '北苑', '望京西', '芍药居', '光熙门', '柳芳', '东直门'],
    #  '14': ['张郭庄', '园博园', '大瓦窑', '郭庄子', '大井', '七里营', '西局', '东管头', '丽泽商务区', '菜户营',
    #         '西铁营', '景风门', '北京南站', '永定门外', '景泰', '蒲黄榆', '方庄', '十里河', '北工大西门', '平乐园',
    #         '九龙山', '大望路', '红庙', '金台路', '朝阳公园', '枣营', '东风北桥', '将台', '高家园', '望京南', '阜通',
    #         '望京', '东湖渠', '来广营', '善各庄']}


    info = {}
    with open('subway1.txt', 'r', encoding='utf-8') as f:
        for line in f.readlines():
            key, value = line.strip().split('=')  # 分割键和值
                # info[key] = value
            info1 = {}
            for item in value.strip().split(','):  # 分割键和值
                k, v = item.strip().split(':')
                info1[k] = v
                # print(info1)
            info[key] = info1
    # print(info)

    info_ = {}
    with open('subway.txt', 'r', encoding='utf-8') as f:
        for line in f.readlines():
            key, value = line.strip().split('=')  # 分割键和值
            # info[key] = value
            info1 = {}
            for item in value.strip().split(','):  # 分割键和值
                k, v = item.strip().split(':')
                info1[k] = v
                # print(info1)
            info_[key] = info1
    info_trans = {}

    with open('trans.txt', 'r', encoding='utf-8') as f:
        for line in f.readlines():
            key, value = line.strip().split('=')  # 分割键和值
                # info[key] = value
            info2 = {}
            for item in value.strip().split(','):  # 分割键和值
                k, v = item.strip().split(':')
                info2[k] = v
                # print(info1)
            info_trans[key] = info2
    print(info_trans.keys())
    with open('lines_1.json', 'r', encoding='utf-8') as f:
        data1 = f.read()
    dataB = json.loads(data1)
    # print(dataB)#lines
    # {'1': ['古城', '八角游乐园', '八宝山', '玉泉路', '五棵松', '万寿路', '军事博物馆', '木樨地', '南礼士路', '西单',
    #        '天安门西', '天安门东', '东单', '永安里', '大望路', '四惠', '四惠东', '高碑店', '传媒大学', '双桥', '管庄',
    #        '八里桥', '通州北苑', '果园', '九棵树', '梨园', '临河里', '土桥', '花庄', '环球度假区'],
    #  '2': ['阜成门', '西直门', '积水潭', '安定门', '东直门', '东四十条', '建国门', '北京站', '前门', '和平门',
    #        '长椿街'],
    #  '4': ['安河桥北', '北宫门', '西苑', '圆明园', '北京大学东门', '中关村', '人民大学', '魏公村', '动物园', '新街口',
    #        '西四', '灵境胡同', '宣武门', '菜市口', '陶然亭', '马家堡', '公益西桥', '新宫', '西红门', '高米店北',
    #        '高米店南', '枣园', '清源路', '黄村西大街', '义和庄', '生物医药基地', '天宫院'],
    #  '5': ['天通苑北', '天通苑', '天通苑南', '立水桥南', '北苑路北', '大屯路东', '惠新西街北口', '和平西桥',
    #        '和平里北街', '北新桥', '张自忠路', '灯市口', '崇文门', '磁器口', '天坛东门', '刘家窑'],
    #  '6': ['金安桥', '杨庄', '西黄村', '廖公庄', '田村', '海淀五路居', '花园桥', '二里沟', '车公庄西', '北海北', '东四',
    #        '东大桥', '金台路', '十里堡', '青年路', '褡裢坡', '黄渠', '常营', '草房', '物资学院路', '通州北关', '通运门',
    #        '北运河西', '北运河东', '郝家府', '东夏园', '潞城'],
    #  '8': ['朱辛庄', '育知路', '平西府', '回龙观东大街', '育新', '西小口', '永泰庄', '林萃桥', '森林公园南门',
    #        '奥林匹克公园', '奥体中心', '安华桥', '安德里北街', '什刹海', '中国美术馆', '金鱼胡同', '前门', '珠市口',
    #        '天桥', '木樨园', '海户屯', '大红门', '大红门南', '和义', '东高地', '火箭万源', '五福堂', '德茂', '瀛海'],
    #  '9': ['白石桥南', '白堆子', '军事博物馆', '北京西站', '六里桥东', '七里庄', '丰台东大街', '丰台南路', '科怡路',
    #        '丰台科技园', '郭公庄'],
    #  '10': ['巴沟', '苏州街', '知春里', '西土城', '牡丹园', '健德门', '安贞门', '芍药居', '太阳宫', '三元桥', '亮马桥',
    #         '农业展览馆', '团结湖', '金台夕照', '双井', '劲松', '潘家园', '分钟寺', '成寿寺', '石榴庄', '角门东',
    #         '草桥', '纪家庙', '首经贸', '丰台站', '泥洼', '六里桥', '莲花桥', '西钓鱼台', '车道沟', '长春桥', '火器营'],
    #  '13': ['大钟寺', '五道口', '上地', '清河站', '西二旗', '龙泽', '回龙观', '立水桥', '北苑', '望京西', '光熙门',
    #         '柳芳'],
    #  '14': ['张郭庄', '园博园', '大瓦窑', '郭庄子', '大井', '七里营', '东管头', '丽泽商务区', '菜户营', '西铁营',
    #         '景风门', '永定门外', '景泰', '方庄', '北工大西门', '平乐园', '九龙山', '红庙', '朝阳公园', '枣营',
    #         '东风北桥', '将台', '高家园', '望京南', '阜通', '望京', '东湖渠', '来广营', '善各庄']}

    # color = {1: "#FF0000", 2: "#4169E1", 4: "#48D1CC", 5: "#BA55D3", 6: "#DAA520", 8: "#2E8B57", 9: "#32CD32",
    #          10: "#87CEFA", 13: "#FFFF00", 14: "#BC8F8F"}
    # stations1 = [[],[],[],[],[],]
    # attractions = {'八角游乐园': ['石景山游乐园'], '玉泉路': ['北京国际雕塑公园'],
    #                    '军事博物馆': ['军事博物馆', '中华世纪坛', '玉渊潭公园'], '木樨地': ['首都博物馆'],
    #                    '天安门西': ['人民大会堂', '中山公园'],
    #                    '天安门东': ['中国国家博物馆', '人民英雄纪念碑', '天安门城楼', '故宫'],
    #                    '王府井': ['老北京风情街','王府井小吃街'], '建国门': ['古观象台'], '永安里': ['日坛公园'],
    #                    '四惠东': ['晋商博物馆'],
    #                '车公庄': ['梅兰芳大剧院'], '积水潭': ['郭守敬纪念馆', '宋庆龄故居'],
    #                    '鼓楼大街': ['北京钟鼓楼', '北滨河公园'], '安定门': ['北锣鼓巷', '五道营胡同'],
    #                    '雍和宫': ['雍和宫', '孔庙', '国子监博物馆', '地坛公园'], '东直门': ['南馆公园'],
    #                    '东四十条': ['文化休闲街'],
    #                    '崇文门': ['北京明城墙遗址公园', '东郊民巷古建筑群'],
    #                    '前门': ['前门大栅栏', '老舍茶馆'], '和平门': ['琉璃厂', '全聚德烤鸭店'], '长椿街': ['宣武艺园'],
    #                    '复兴门': ['吕祖宫'], '阜成门': ['鲁迅博物馆'],
    #                '北宫门': ['颐和园'], '圆明园': ['圆明园遗址公园'], '北京大学东门': ['北京大学'],
    #                    '国家图书馆': ['国家图书馆', '紫竹院公园'], '动物园': ['北京动物园', '北京天文馆'],
    #                    '平安里': ['护国寺小吃总店', '百花深处胡同'], '西四': ['中国地质博物馆', '历代帝王寺', '广济寺'],
    #                    '西单': ['西单大悦城'], '菜市口': ['法源寺'], '陶然亭': ['万寿公园', '陶然亭公园'],
    #                    '西红门': ['地铁文化公园'], '枣园': ['康庄公园', '枣林公园'],
    #                '天通苑': ['天通尾货'], '立水桥': ['立水桥公园'], '北苑路北': ['北辰绿色中央公园'],
    #                    '和平西桥': ['慕田峪长城'], '北新桥': ['九道湾胡同', '循郡王府'], '张自忠路': ['和敬公主府'],
    #                    '东四': ['东四胡同'], '灯市口': ['史家胡同博物馆', '史家胡同'],
    #                    '天坛东门': ['天坛公园'],
    #                '西黄村': ['北京石景山区博物馆'], '海淀五路居': ['中国书画美术馆'],
    #                    '慈寿寺': ['玲珑公园', '京门铁路主题公园'], '花园桥': ['中国国家画院博物馆'],
    #                    '北海北': ['北海公园', '恭王府', '郭沫若故居'], '南锣鼓巷': ['南锣鼓巷'],
    #                    '十里堡': ['红领巾公园'], '褡裢坡': ['黄渠公园'],
    #                '森林公园南门': ['奥林匹克公园'],
    #                    '奥林匹克公园': ['国家动物博物馆', '中国科学技术馆'],
    #                    '奥体中心': ['鸟巢', '水立方'], '北土城': ['元大都城垣遗址公园', '海棠花溪'],
    #                    '安华桥': ['西黄寺博物馆'], '安德里北街': ['人定湖公园'],
    #                    '什刹海': ['什刹海'], '中国美术馆': ['中国美术馆'],
    #                    '金鱼胡同': ['和平菓局'],
    #                    '天桥': ['北京自然博物馆', '天桥德云社剧场'],
    #                '郭公庄': ['北京世界公园'], '六里桥东': ['莲花池公园'], '六里桥': ['万丰公园'],
    #                    '丰台南路': ['丰台科技园生态主题公园'],
    #                '苏州街': ['中国民族博物馆'], '海淀黄庄': ['海淀区博物馆'], '健德门': ['海淀区博物馆'],
    #                     '团结湖': ['团结湖公园'], '金台夕照': ['世贸天阶'],
    #                     '潘家园': ['潘家园古玩市场'], '大红门': ['福海公园'], '草桥': ['嘉河公园'],
    #                     '莲花桥': ['广安门外城市休闲公园'], '西钓鱼台': ['四季曙光公园'],
    #                '望京西': ['望承公园'],
    #                '园博园': ['北京园博园'],
    #                     '景泰': ['中国景泰蓝艺术博物馆'],
    #                     '朝阳公园': ['朝阳公园', '北京画院美术馆'], '望京': ['望京公园'],
    #                     }
    # jsonA = json.dumps(attractions)
    # with open('attractions.json', 'w', encoding='utf-8') as f:
    #     f.write(jsonA)
    # with open('attractions.json', 'r', encoding='utf-8') as f:
    #     at = f.read()
    # att = json.loads(at)
    # print(att)
    # aa = input()
    # e = []
    # for i in aa.strip().split(' '):
    #     e.append(i)
    # start = 'start'
    # for i in e:
    #     end1 = i
    #     for k, v in attractions.items():
    #         if end1 in v:
    #             end = k
    #             if end1 != e[0]:
    #                 start1 = e[e.index(end1) - 1]
    #                 for k, v in attractions.items():
    #                     if start1 in v:
    #                         start = k
    #                         break
    #             print(start, end)

    # 示例使用
    print('请输入起始站：')
    start = input()
    print('请输入终点站：')
    end = input()
    # x = []
    # y = []
    # for key, value in pos.items():
    #     for k, v in value.items():
    #         x.append(v[0])
    #         y.append(v[1])
    # print(x)
    # print(y)
    # positionx, positiony = wgs48_to_xy(x, y)
    # print(positionx)
    # print(positiony)
    g = graph(info)
    d = dijkstra(g, start, info_trans, dataB, dataA)
    short = d.find_shortest_path(end)
    a, b = d.totrans(short)
    print(short)
    print(a)
    print('价格：')
    print(d.getPrice(short))
    print('用时：')
    print(d.getTime(short))
    g1 = graph(info_)
    d1 = dijkstra(g1, start, info_trans, dataB, dataA)
    short = d1.find_shortest_path(end)
    print(short)
    print('价格：')
    print(d1.getPrice(short))
    print('用时：')
    print(d1.getTime(short))
    # trans = d.find_least_trans(end)
    # print(d.trans_station(short))
    # print(trans)
    # aaaa =(len(trans)-1)*2
    # print('价格：')
    # print(d.getPrice_1(aaaa))
    # print('用时：')
    # print(str(int(aaaa * 1.7)))
    # print(d.trans_station(trans))








